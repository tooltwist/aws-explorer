Parameters:
  Prefix:
    Description: "Prefix for AWS resources"
    Type: String
    Default: "j-"

  EnvironmentName:
    Description: "IMPORTANT    -->>> this MUST match the previous stacks for this environment"
    Type: String

  InstanceType:
    Description: "Container Instance type"
    Type: "String"
    Default: "t3.small"
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
    ConstraintDescription: "must be a valid EC2 instance type."

  ClusterSize:
    Type: Number
    Default: 1

#  Subnets:
#    Type: List<AWS::EC2::Subnet::Id>
#
#  SourceSecurityGroup:
#    Type: AWS::EC2::SecurityGroup::Id

# The mappings come from http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
# These should be kept up to date so we get the latest security patches
#
#   The image mappings can be selected with the following command. If you don't already
#   have it, the 'json' command can be installed with 'npm install -g json'.
#
#  regions=$(aws ec2 describe-regions | json Regions | json -a RegionName)
#  for REGION in ${regions} ; do
#    echo Fetching ${REGION} >&2
#   IMAGE_ID=$(aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended --region ${REGION} \
#                   | json Parameters | json -a Value | json image_id)
#    if [ "${IMAGE_ID}" != "" ] ; then
#      echo "    ${REGION}:"
#      echo "      AMI: ${IMAGE_ID}"
#    else
#      echo "Error fetching image_id for ${REGION}" >&2
#    fi
#  done > ,images
#
# Updated March 20, 2020 - Philip Callender
#
Mappings:
  Constants:
    InstanceValues:
      TemplateName: "13.env.ecs-cluster.cf"
      TemplateVersion: "1.0.0"

  AWSRegionToAMI:
    eu-north-1:
      AMI: ami-02f199bc58ba33c80
    ap-south-1:
      AMI: ami-0af0b95bc21b60a92
    eu-west-3:
      AMI: ami-02eabcca2e8404e58
    eu-west-2:
      AMI: ami-02789e5e628dded7f
    eu-west-1:
      AMI: ami-0851c53aff84212c3
    ap-northeast-2:
      AMI: ami-05098f687b0afb5b7
    ap-northeast-1:
      AMI: ami-00c408a8b71d5c614
    sa-east-1:
      AMI: ami-0eb3913d6013a3d37
    ca-central-1:
      AMI: ami-0081e77ff9d191647
    ap-southeast-1:
      AMI: ami-0a47eb5f85b07481e
    ap-southeast-2:
      AMI: ami-03e55a57522b1a61e
    eu-central-1:
      AMI: ami-0e2c05064087d4fd7
    us-east-1:
      AMI: ami-098616968d61e549e
    us-east-2:
      AMI: ami-0c0415cdff14e2a4a
    us-west-1:
      AMI: ami-0fddd00791ff99163
    us-west-2:
      AMI: ami-014a2e30da708ee8b



Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub "${Prefix}access-secrets-${EnvironmentName}-cluster"
          PolicyDocument:
            Statement:
                - Action: secretsmanager:GetSecretValue
                  Effect: Allow
                  Resource: "*"
# Not sure why, but the specific ARN does not work, even if manually added to the Rule.
#                  Resource: {"Fn::ImportValue" : {"Fn::Sub" : "${Prefix}${EnvironmentName}-${ApplicationName}-Secret"}}

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

#  ECSSecurityGroup:
#    Type: "AWS::EC2::SecurityGroup"
#    Properties:
#      GroupDescription: !Sub ${AWS::StackName}-hosts
##      SecurityGroupIngress:
##        - SourceSecurityGroupId: !Ref SourceSecurityGroup
##          IpProtocol: -1
#      SecurityGroupIngress:
#        - SourceSecurityGroupId:
#            'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-LoadBalancerSecurityGroup'
#          IpProtocol: -1
#      VpcId:
#          'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-VPCID'

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Prefix}${EnvironmentName}'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Prefix}${EnvironmentName}-AutoScalingGroup
      VPCZoneIdentifier:
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-PrivateSubnet1'
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-PrivateSubnet2'
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}${EnvironmentName}-AutoScale
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Sub ${Prefix}${EnvironmentName}
          PropagateAtLaunch: true
        - Key: "aws-explorer:template"
          Value: !FindInMap [ Constants, InstanceValues, TemplateName ]
          PropagateAtLaunch: true
        - Key: "aws-explorer:version"
          Value: !FindInMap [ Constants, InstanceValues, TemplateVersion ]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchConfigurationName: !Sub ${Prefix}${EnvironmentName}-LaunchConfiguration
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      KeyName: !Sub '${Prefix}${EnvironmentName}-${AWS::Region}'
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-ApplicationSecurityGroup'
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup


Outputs:
  ClusterName:
    Description: Cluster name
    Value: !Ref Cluster
    Export:
      Name: !Sub ${Prefix}${EnvironmentName}-Cluster

  # This next output serves no purpose, than to check the Prefix/EnvironmentName
  # combination is valid. It does this by checking for an export from the
  # previously run network creation stack.
  NetworkPreviouslyCreated:
    Value: {"Fn::ImportValue" : {"Fn::Sub" : "${Prefix}${EnvironmentName}-NetworkCreated"}}
  #
  # This next export allows subsequent stacks can know that they
  # are setting up a Prefix/Environment that has a network already.
  #
  ClusterCreated:
    Description: Export so other stacks can check this has been run
    Value: "true"
    Export:
      Name: !Sub ${Prefix}${EnvironmentName}-ClusterCreated

---
AWSTemplateFormatVersion: 2010-09-09


Parameters:
  Prefix:
    Description: "Prefix for AWS resource names"
    Type: String
    Default: "j-"

  EnvironmentName:
    Description: "Environment name (Note: this MUST match the previously run s3 and vpc stacks)"
    Type: String

  ApplicationName:
    Type: String

  GitHubUser:
    Description: "https://github.com/<USER_NAME>/xxxxxx.git"
    Type: String

  GitHubRepo:
    Description: "https://github.com/xxxxxx/<REPOSITORY_NAME>.git"
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String
    NoEcho: true

#  Cluster:
#    Type: String
#
#  Service:
#    Type: String


  DockerImageRepository:
    Description: "ECR repository where Docker images will get stored.\n(Created previously by <b>docker-image-repo.cf</b>)"
    Type: String
    Default: "tooltwist-xxxxxxxxxx"



Resources:
#  Repository:
#    Type: AWS::ECR::Repository
#    DeletionPolicy: Retain
#    Properties:
#      RepositoryName: !Sub "${Prefix}${EnvironmentName}-${ApplicationName}"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
#              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${tooltwist-xxxxxxxxxx}
              - Resource: {"Fn::ImportValue" : {"Fn::Sub" : "ecr-${DockerImageRepository}-arn"}}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
                - echo REPOSITORY_URI=${REPOSITORY_URI}
                - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
                - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - echo TAG=${TAG}
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
                - TAG2="$(echo $CODEBUILD_SOURCE_VERSION | sed 's!.*/!!')"
                - echo TAG2=${TAG2}
                - echo ENVIRONMENT=${ENVIRONMENT}
                - echo APPLICATION=${APPLICATION}
                - echo COMMITMSG=${COMMITMSG}
                - echo CommitId=${CommitId}
                - echo CommitMessage=${CommitMessage}
                - echo CommitterDate=${CommitterDate}
                - echo CODEBUILD_GIT_MESSAGE=${CODEBUILD_GIT_MESSAGE}
                - COMMITMSG=$(echo "${CommitMessage}" | sed s/\'// | sed s/\"//)
                - pwd
                - find . -type f | sort
                - test -f build-details.js && sed -i "s/___INSERT_VERSION_HERE___/${TAG}/" build-details.js
                - test -f build-details.js && sed -i "s/___INSERT_BUILD_NUMBER_HERE___/${CODEBUILD_BUILD_NUMBER}/" build-details.js
                - test -f build-details.js && sed -i "s/___INSERT_COMMITMSG_HERE___/${COMMITMSG}/" build-details.js
                
            build:
              commands:
                - docker build --tag "$IMAGE_URI" .
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - printf '[{"name":"%sApp","imageUri":"%s"}]' "$APPLICATION" "$IMAGE_URI" > images.json
          artifacts:
            files: images.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerImageRepository}
          - Name: ENVIRONMENT
            Value: !Sub ${EnvironmentName}
          - Name: APPLICATION
            Value: !Sub ${ApplicationName}
      Cache:
        # https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html#caching-local
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${Prefix}${EnvironmentName}-${ApplicationName}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Sub "${Prefix}${EnvironmentName}"
                ServiceName: !Sub "${Prefix}${EnvironmentName}-${ApplicationName}"
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1


Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}

  DockerImageRepositoryUrl:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ecr/repositories/${DockerImageRepository}/?region=${AWS::Region}"

  # This next output serves no purpose, than to check the Prefix/EnvironmentName/ApplicationName
  # combination is valid. It does this by checking for an export from the
  # previously run load balancer creation stack.
  ServicePreviouslyCreated:
    Value: {"Fn::ImportValue" : {"Fn::Sub" : "${Prefix}${EnvironmentName}-${ApplicationName}-ServiceCreated"}}

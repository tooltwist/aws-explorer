Parameters:
  #
  # Based on AWS reference architecture:
  # https://github.com/aws-samples/ecs-refarch-cloudformation
  # https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/infrastructure/ecs-cluster.yaml
  #
  Prefix:
    Description: "Prefix for AWS resources"
    Type: String
    Default: "j-"

  EnvironmentName:
    Type: String

  InstanceType:
    Type: "String"
    Default: "t3.small"
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
    ConstraintDescription: "must be a valid EC2 instance type."

  ClusterSize:
    Type: Number
    Default: 1

#  Subnets:
#    Type: List<AWS::EC2::Subnet::Id>
#
#  SourceSecurityGroup:
#    Type: AWS::EC2::SecurityGroup::Id

# The mappings come from http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
# These should be kept up to date so we get the latest security patches
#
#   The image mappings can be selected with the following command. If you don't already
#   have it, the 'json' command can be installed with 'npm install -g json'.
#
#  regions=$(aws ec2 describe-regions | json Regions | json -a RegionName)
#  for REGION in ${regions} ; do
#    echo Fetching ${REGION} >&2
#   IMAGE_ID=$(aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended --region ${REGION} \
#                   | json Parameters | json -a Value | json image_id)
#    if [ "${IMAGE_ID}" != "" ] ; then
#      echo "    ${REGION}:"
#      echo "      AMI: ${IMAGE_ID}"
#    else
#      echo "Error fetching image_id for ${REGION}" >&2
#    fi
#  done > ,images
#
# Updated March 20, 2020 - Philip Callender
#
Mappings:
  Constants:
    InstanceValues:
      TemplateName: "12.env.ecs-cluster.cf"
      TemplateVersion: "1.1.0"

  AWSRegionToAMI:
    eu-north-1:
      AMI: ami-02f199bc58ba33c80
    ap-south-1:
      AMI: ami-0af0b95bc21b60a92
    eu-west-3:
      AMI: ami-02eabcca2e8404e58
    eu-west-2:
      AMI: ami-02789e5e628dded7f
    eu-west-1:
      AMI: ami-0851c53aff84212c3
    ap-northeast-2:
      AMI: ami-05098f687b0afb5b7
    ap-northeast-1:
      AMI: ami-00c408a8b71d5c614
    sa-east-1:
      AMI: ami-0eb3913d6013a3d37
    ca-central-1:
      AMI: ami-0081e77ff9d191647
    ap-southeast-1:
      AMI: ami-0a47eb5f85b07481e
    ap-southeast-2:
      AMI: ami-03e55a57522b1a61e
    eu-central-1:
      AMI: ami-0e2c05064087d4fd7
    us-east-1:
      AMI: ami-098616968d61e549e
    us-east-2:
      AMI: ami-0c0415cdff14e2a4a
    us-west-1:
      AMI: ami-0fddd00791ff99163
    us-west-2:
      AMI: ami-014a2e30da708ee8b

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Name this stack: <environment>-cluster"
        Parameters: 
          - Prefix
          - EnvironmentName
          - InstanceType
          - ClusterSize
    ParameterLabels:
      EnvironmentName:
        default: "Environment name"
      InstanceType:
        default: "Container Instance type"
      ClusterSize:
        default: "Number of instances in this cluster"

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Prefix}${EnvironmentName}'

  ECSAutoScalingGroup:
    DependsOn: ECSCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Prefix}${EnvironmentName}-AutoScalingGroup
      VPCZoneIdentifier:
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-PrivateSubnet1'
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-PrivateSubnet2'
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}${EnvironmentName}-ecs-host'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Sub ${Prefix}${EnvironmentName}
          PropagateAtLaunch: true
        - Key: "aws-explorer:template"
          Value: !FindInMap [ Constants, InstanceValues, TemplateName ]
          PropagateAtLaunch: true
        - Key: "aws-explorer:version"
          Value: !FindInMap [ Constants, InstanceValues, TemplateVersion ]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub ${Prefix}${EnvironmentName}-LaunchConfiguration
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      # No longer required
      KeyName: !Sub '${Prefix}${EnvironmentName}-${AWS::Region}'
      IamInstanceProfile: !Ref ECSInstanceProfile
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-ApplicationSecurityGroup'
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y hibagent
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
          /usr/bin/enable-ec2-spot-hibernation

    Metadata:
      AWS::CloudFormation::Init:
        config:
          #ZZpackages:
          #ZZ  yum:
          #ZZ    collectd: []

          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${ECSCluster} > /etc/ecs/ecs.config
            #ZZ02_enable_cloudwatch_agent:
            #ZZ    command: !Sub /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ECSCloudWatchParameter} -s
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  #
  # IMPORTANT NOTE REGARDING ROLES:
  # There are several types of roles related to ECS. To get an understanding, go to the
  # IAM Console and Roles, then add a new role. Select "Elastic Container Service" and
  # it explains and allows you to create each role type. They can form the model for
  # what you need here.
  #

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host (Phil, 11 May 2020 - don't add policies here).
  #
  # From https://dillonbeliveau.com/2018/12/08/aws-ecs-iam-roles-demystified.html
  # When running ECS on EC2, the EC2 instances hosting the containers need a role. This
  # role gives them permission to, among other things, pull images from ECR, manage tasks
  # in the ECS API, and put logs into cloudwatch.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub '${Prefix}${EnvironmentName}-ECSRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      #Policies:
      #  - PolicyName: !Sub "${Prefix}${EnvironmentName}-access-secrets"
      #    PolicyDocument:
      #      Statement:
      #        Effect: Allow
      #        Action:
      #          - secretsmanager:GetSecretValue
      #          - ssm:GetParameters
      #        Resource: "*"

  ECSInstanceProfile:
    DependsOn: ECSRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Prefix}${EnvironmentName}-instanceprofile'
      Path: /

      # From https://dillonbeliveau.com/2018/12/08/aws-ecs-iam-roles-demystified.html
      # When running ECS on EC2, the EC2 instances hosting the containers need a role. This
      # role gives them permission to, among other things, pull images from ECR, manage
      # tasks in the ECS API, and put logs into cloudwatch.
      Roles:
        - !Ref ECSRole

  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: !Sub '${Prefix}${EnvironmentName}-developers'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: /
      #Policies: 
      #  - Policy

#  ECSSecurityGroup:
#    Type: "AWS::EC2::SecurityGroup"
#    Properties:
#      GroupDescription: !Sub ${AWS::StackName}-hosts
##      SecurityGroupIngress:
##        - SourceSecurityGroupId: !Ref SourceSecurityGroup
##          IpProtocol: -1
#      SecurityGroupIngress:
#        - SourceSecurityGroupId:
#            'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-LoadBalancerSecurityGroup'
#          IpProtocol: -1
#      VpcId:
#          'Fn::ImportValue': !Sub '${Prefix}${EnvironmentName}-VPCID'

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Prefix}${EnvironmentName}-ECSServiceAutoScalingRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

  ECSCloudWatchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: ECS
      Name: !Sub "AmazonCloudWatch-${ECSCluster}-ECS"
      Type: String
      Value: !Sub |
        {
          "logs": {
            "force_flush_interval": 5,
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "${ECSCluster}-/var/log/messages",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%b %d %H:%M:%S"
                  },
                  {
                    "file_path": "/var/log/dmesg",
                    "log_group_name": "${ECSCluster}-/var/log/dmesg",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/docker",
                    "log_group_name": "${ECSCluster}-/var/log/docker",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%S.%f"
                  },
                  {
                    "file_path": "/var/log/ecs/ecs-init.log",
                    "log_group_name": "${ECSCluster}-/var/log/ecs/ecs-init.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  },
                  {
                    "file_path": "/var/log/ecs/ecs-agent.log.*",
                    "log_group_name": "${ECSCluster}-/var/log/ecs/ecs-agent.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  },
                  {
                    "file_path": "/var/log/ecs/audit.log",
                    "log_group_name": "${ECSCluster}-/var/log/ecs/audit.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "/"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              }
            }
          }
        }

Outputs:
  ClusterName:
    Description: Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${Prefix}${EnvironmentName}-Cluster

  ECSRole:
    Description: Role for the ECS service for Instances
    Value: !GetAtt ECSRole.Arn
    Export:
      Name: !Sub ${Prefix}${EnvironmentName}-ECSRole

  ECSServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSServiceAutoScalingRole.Arn

  ECSAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup

  # This next output serves no purpose, than to check the Prefix/EnvironmentName
  # combination is valid. It does this by checking for an export from the
  # previously run network creation stack.
  NetworkPreviouslyCreated:
    Value: {"Fn::ImportValue" : {"Fn::Sub" : "${Prefix}${EnvironmentName}-NetworkCreated"}}
  #
  # This next export allows subsequent stacks can know that they
  # are setting up a Prefix/Environment that has a network already.
  #
  ClusterCreated:
    Description: Export so other stacks can check this has been run
    Value: "true"
    Export:
      Name: !Sub ${Prefix}${EnvironmentName}-ClusterCreated

Parameters:
  EnvironmentName:
    Description: "Environment name (Note: this MUST match the previously run s3 and vpc stacks)"
    Type: String

  ApplicationName:
    Type: String

  GitHubUser:
    Description: "e.g. https://github.com/<USER_NAME>/xxxxxx.git"
    Type: String

  GitHubRepo:
    Description: "e.g. https://github.com/xxxxxx/<REPOSITORY_NAME>.git"
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String

#  TemplateBucket:
#    Type: String


Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  #
  #               ROLES AND PERMISSIONS
  #
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
#      RoleName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-CloudFormationExecutionRole"
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-CodeBuildServiceRole"
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-CodePipelineServiceRole"
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  # nbt-${EnvironmentName}-${ApplicationName}-AssetsS3
#                  - !Sub arn:aws:s3:::${TemplateBucket}
#                  - !Sub arn:aws:s3:::${TemplateBucket}/*
                  # Should use import nbt-${EnvironmentName}-ConfigS3
                  - !Sub arn:aws:s3:::nbt-${EnvironmentName}-configs
                  - !Sub arn:aws:s3:::nbt-${EnvironmentName}-configs/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - lambda:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
#              - Resource: "arn:aws:logs:*:*:*"
#                Effect: Allow
#                Action:
#                  - logs:*


  # From https://stelligent.com/2016/02/08/aws-lambda-functions-aws-codepipeline-cloudformation/
  CodePipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-CodePipelineLambdaRole"
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "lambda.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      # AssumeRolePolicyDocument: |
      #   {
      #       "Statement": [{
      #           "Effect": "Allow",
      #           "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
      #           "Action": [ "sts:AssumeRole" ]
      #       }]
      #   }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  - !Sub arn:aws:s3:::nbt-${EnvironmentName}-configs
                  - !Sub arn:aws:s3:::nbt-${EnvironmentName}-configs/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - lambda:Listfunctions
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents


  # Type: AWS::IAM::Role
  # Properties:
  #   Path: /
  #   AssumeRolePolicyDocument: |
  #     {
  #         "Statement": [{
  #             "Version": "2012-10-17",
  #             "Effect": "Allow",
  #             "Principal": { "Service": [ "lambda.amazonaws.com" ]},
  #             "Action": [ "sts:AssumeRole" ]
  #         }]
  #     }
  #   Policies:
  #     - PolicyName: root
  #       PolicyDocument:
  #         Version: 2012-10-17
  #         Statement:
  #           - Resource:
  #               - "arn:aws:logs:*:*:*"
  #             Effect: Allow
  #             Action:
  #               - logs:*
  #           - Resource:
  #               - "*"
  #             Effect: Allow
  #             Action:
  #               - codepipeline:PutJobSuccessResult
  #               - codepipeline:PutJobFailureResult


  ###
  ###         A place to store the outputs of each CodePipeline stage
  ###
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain


  ###
  ###         A Secure GIT repository for our infrastructure configuration files
  ###
  SecureConfigRepo:
    Type: "AWS::CodeCommit::Repository"
    Properties:
      RepositoryDescription: "Repository for infrastructure configuration"
      RepositoryName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-SecureConfig"
#      Triggers:
#      - Trigger


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "S3"
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login)
                # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
                - echo REPOSITORY_URI=${REPOSITORY_URI}
                - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
                - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
                # Use one of the following to get a version TAG:
                # 1. Get the tag from an CodeCommit 'Source' artifact
                # - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                # 2. Get the tag from an S3 artifact Id
                # For example, strips the 'TNjUFZt' off
                #  arn:aws:s3:::nbt-trsgd1-j9-codepipeline-artifactbucket-ja2ipgfwtdik/nbt-trsgd1-j9-pipeli/AppAndConf/TNjUFZt
                - TAG="$(echo $CODEBUILD_SOURCE_VERSION | sed 's!.*/!!')"
                - echo TAG=${TAG}
                - mkdir -p secure-config
                - pwd
                - find . -type f | sort
                # - ls -lR
            build:
              commands:
                - docker build --tag "${REPOSITORY_URI}:${TAG}" .
            post_build:
              commands:
                - docker push "${REPOSITORY_URI}:${TAG}"
                - printf '{"tag":"%s"}' $TAG > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole


  # Lambda to merge artifacts
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  # From https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
  MergeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-merge"
      Code:
        S3Bucket: !Sub "nbt-lambdas-${AWS::Region}"
        S3Key: "CodepipelineArtifactMunge.zip"
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Description: "Lambda function to merge artifacts in a CodePipeline"
      Timeout: 300
      Handler:  "merge.handler"
      Runtime: "nodejs6.10"
      MemorySize: 256


  # Lambda to extract artifacts
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  # From https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
  ExtractLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-extract"
      Code:
        S3Bucket: !Sub "nbt-lambdas-${AWS::Region}"
        S3Key: "CodepipelineArtifactMunge.zip"
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Description: "Lambda function to extract from artifacts in a CodePipeline"
      Timeout: 300
      Handler:  "extract.handler"
      Runtime: "nodejs6.10"
      MemorySize: 256


  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "nbt-${EnvironmentName}-${ApplicationName}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

        # Source stage
        # Collect all the stuff we might need and place it in
        # a new artifact (zip file) in ${ArtifaceBucket}.
        #
        - Name: Source
          Actions:
            # The source code of the application, from GitHub
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1

            # SecureConfig from CodeCommit
            # See https://stelligent.com/2016/04/25/automate-codecommit-and-codepipeline-in-aws-cloudformation/
            - Name: SecureConfig
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                # RepositoryName: !Ref SecureConfigRepositoryName
                # BranchName: !Ref SecureConfigBranchName
                RepositoryName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-SecureConfig"
                BranchName: master
              OutputArtifacts:
                - Name: SecureConfig
              RunOrder: 1

#            # The Cloudformation template to deploy gets put in our archive as well
#            - Name: DeployTemplate
#              ActionTypeId:
#                Category: Source
#                Owner: AWS
#                Provider: S3
#                Version: '1'
#              Configuration:
#                S3Bucket:
#                  'Fn::ImportValue': !Sub 'nbt-${EnvironmentName}-ConfigS3'
#                S3ObjectKey:
#                  !Sub Deploy/${ApplicationName}.zip
#              OutputArtifacts:
#                - Name: DeployTemplate
#              RunOrder: 1

        # Merge stage
        # This merges the App and SecureConfig artifacts
        # See https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
        - Name: Merge
          Actions:
            - Name: "app-and-config"
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref MergeLambda
                UserParameters: "secure-config"
              InputArtifacts:
                - Name: App
                - Name: SecureConfig
              OutputArtifacts:
                - Name: AppAndConfig
              RunOrder: 2

        # Build stage
        # This is where we create the Docker image and put it in the repository.
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: AppAndConfig
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 3

        # Extract stage
        # This extracts the deployment template from the SecureConfig artifact
        # See https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
        - Name: Extract
          Actions:
            - Name: "deploy-template"
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref ExtractLambda
                UserParameters: "Deploy/service.cf"
              InputArtifacts:
                - Name: SecureConfig
              OutputArtifacts:
                - Name: DeployTemplate2
              RunOrder: 2

        # Deploy stage
        # Run the cloudformation template for deployment, located in the
        # new archive in ${ArchiveBucket}, which updates the ECS service
        # config to use the new Docker image in ${Repository}.
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                StackName: !Sub "${AWS::StackName}-service"
                #StackName: !Sub "nbt-${EnvironmentName}-${ApplicationName}-3-install-to-ecs"
                #StackName: !Sub "${AWS::StackName}-install-as-service"
                #StackName: !Sub "${AWS::StackName}-ecs"
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: DeployTemplate2::Deploy/service.cf
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub
                  - |
                    {
                      "Tag" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                      "DesiredCount": "1",
                      "Cluster": "${Cluster}",
                      "TargetGroup": "${TargetGroup}",
                      "Repository": "${Repository}"
                    }
                  - { Cluster: { "Fn::ImportValue": { "Fn::Sub": "nbt-${EnvironmentName}-Cluster"} }, TargetGroup: {"Fn::ImportValue": {"Fn::Sub": "nbt-${EnvironmentName}-${ApplicationName}-TargetGroup"}} }
              InputArtifacts:
                - Name: DeployTemplate2
                - Name: BuildOutput
              RunOrder: 4



Outputs:
  PipelineUrl:
    Description: Pipeline URL
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
    Export:
      Name: !Sub nbt-${EnvironmentName}-${ApplicationName}-Pipeline

#
#       This Cloudformation script is called by CodePipeline when
#       a new version of the application has been saved as Docker
#       image into the artifacts repository.
#
#       It updates the task definition for the service, causing
#       the new image to be started.
#
#       Based on:
#       https://github.com/awslabs/ecs-refarch-continuous-deployment/blob/master/templates/service.yaml
#
Parameters:
  Tag:
    Type: String
    Default: latest

  DesiredCount:
    Type: Number
    Default: 0

  TargetGroup:
    Type: String

  Cluster:
    Type: String

  Repository:
    Type: String


Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "nbt-___ENVIRONMENT___-___APPLICATION___"
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: ___APPLICATION___App
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ___ENVIRONMENT___-___APPLICATION___
      ContainerDefinitions:
        - Name: ___APPLICATION___App
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          Essential: true
          Memory: 256
          PortMappings:
            - ContainerPort: ___APPLICATION_PORT___
              Protocol: tcp
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: SERVER_HOME
              Value: /secure-config/Config/home
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': ___LOGSTREAM___
              'awslogs-stream-prefix': ___APPLICATION___

#	LogConfiguration:
#		logDriver: awslogs
#		options:
#			awslogsGroup: ___LOGSTREAM___
#			awslogsRegion: ${AWS::Region}
#			awslogsStreamPrefix: authservice
